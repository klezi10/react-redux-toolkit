{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n  /* if you have a large code base, to combine all reducers:\r\n  reducer: { counter: counterSlice.reducer }, */\n\n});\nexport const counterActions = counterSlice.actions;\nexport default store; // make sure to default export the store, not the component function","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","counterSlice","increment","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"sources":["C:/Users/Klizzy/Desktop/my-projects/redux-react/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\nconst initialAuthState = { isAuthenticated: false };\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer,\r\n  /* if you have a large code base, to combine all reducers:\r\n  reducer: { counter: counterSlice.reducer }, */\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default store;\r\n// make sure to default export the store, not the component function\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAnB,CAAzB;AAEA,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MADsB;EAE5BC,YAAY,EAAEJ,gBAFc;EAG5BK,QAAQ,EAAE;IACRC,KAAK,CAACC,KAAD,EAAQ;MACXA,KAAK,CAACN,eAAN,GAAwB,IAAxB;IACD,CAHO;;IAIRO,MAAM,CAACD,KAAD,EAAQ;MACZA,KAAK,CAACN,eAAN,GAAwB,KAAxB;IACD;;EANO;AAHkB,CAAD,CAA7B;AAaA,MAAMQ,YAAY,GAAGd,WAAW,CAAC;EAC/BQ,IAAI,EAAE,SADyB;EAE/BC,YAAY,EAAEP,mBAFiB;EAG/BQ,QAAQ,EAAE;IACRK,SAAS,CAACH,KAAD,EAAQ;MACfA,KAAK,CAACT,OAAN;IACD,CAHO;;IAIRa,SAAS,CAACJ,KAAD,EAAQ;MACfA,KAAK,CAACT,OAAN;IACD,CANO;;IAORc,QAAQ,CAACL,KAAD,EAAQM,MAAR,EAAgB;MACtBN,KAAK,CAACT,OAAN,GAAgBS,KAAK,CAACT,OAAN,GAAgBe,MAAM,CAACC,OAAvC;IACD,CATO;;IAURC,aAAa,CAACR,KAAD,EAAQ;MACnBA,KAAK,CAACR,WAAN,GAAoB,CAACQ,KAAK,CAACR,WAA3B;IACD;;EAZO;AAHqB,CAAD,CAAhC;AAmBA,MAAMiB,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAER,YAAY,CAACQ;EACtB;AACF;;AAH6B,CAAD,CAA5B;AAMA,OAAO,MAAMC,cAAc,GAAGT,YAAY,CAACU,OAApC;AAEP,eAAeH,KAAf,C,CACA"},"metadata":{},"sourceType":"module"}